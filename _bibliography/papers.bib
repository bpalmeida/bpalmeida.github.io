---
---


@inproceedings{DBLP:journals/corr/abs-2304-06396,
  selected  = true,
  bibtex_show={true},
  abbr      = {PLACES'23},
  url_custom = {https://doi.org/10.4204/EPTCS.378.1},
  author       = {Bernardo Almeida and
                  Andreia Mordido and
                  Vasco T. Vasconcelos},
  editor       = {Ilaria Castellani and
                  Alceste Scalas},
  title        = {Kind Inference for the FreeST Programming Language},
  booktitle    = {PLACES@ETAPS, Paris, France},
  series       = {{EPTCS}},
  volume       = {378},
  pages        = {1--13},
  year         = {2023},
  url          = {https://doi.org/10.4204/EPTCS.378.1},
  doi          = {10.4204/EPTCS.378.1},
  timestamp    = {Mon, 05 Feb 2024 20:19:03 +0100},
  biburl       = {https://dblp.org/rec/journals/corr/abs-2304-06396.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org},
  abstract = { We present a kind inference algorithm for the FREEST programming
                  language. The input to the algorithm is FREEST source code
                  with (possibly part of) kind annotations replaced by kind
                  variables. The algorithm infers concrete kinds for all kind
                  variables. We ran the algorithm on the FREEST test suite by
                  first replacing kind annotation on all type variables by fresh
                  kind variables, and concluded that the algorithm correctly
                  infers all kinds. Non surprisingly, we found out that
                  programmers do not choose the most general kind in 20\% of the
                  cases.}
}


@article{ALMEIDA2022104948,
  selected  = true,
  bibtex_show={true},
  abbr      = {Inf. & Comp.},
  url_custom = {https://www.sciencedirect.com/science/article/pii/S0890540122001031},
  title = {Polymorphic lambda calculus with context-free session types},
  journal = {Information and Computation},
  pages = {104948},
  year = {2022},
  issn = {0890-5401},
  doi = {https://doi.org/10.1016/j.ic.2022.104948},
  url = {https://www.sciencedirect.com/science/article/pii/S0890540122001031},
  author = {Bernardo Almeida and Andreia Mordido and Peter Thiemann and Vasco T. Vasconcelos},
  keywords = {Polymorphism, Functional programming, Session types, Context-free types},
  abstract = {Session types provide a typing discipline for structured
                  communication on bidirectional channels. Context-free session
                  types overcome the restriction to tail recursive protocols
                  characteristic of conventional session types. This extension
                  enables the serialization and deserialization of tree
                  structures in a fully type-safe manner. We present the theory
                  underlying the language FreeST 2, which features context-free
                  session types in an extension of System F with linear types
                  and a kinding system to distinguish message types, session
                  types, and channel types. The system presents metatheoretical
                  challenges which we address: contractivity in the presence of
                  polymorphism, a non-trivial equational theory on types, and
                  decidability of type equivalence. We also establish standard
                  results on typing preservation, progress, and a
                  characterization of erroneous processes.}
}




@inproceedings{DBLP:conf/tacas/AlmeidaMV20,
  selected  = true,
  bibtex_show={true},
  abbr      = {TACAS'20},
  url_custom = {https://doi.org/10.1007/978-3-030-45237-7\_3},
  author    = {Bernardo Almeida and
               Andreia Mordido and
               Vasco T. Vasconcelos},
  editor    = {Armin Biere and
               David Parker},
  title     = {Deciding the Bisimilarity of Context-Free Session Types},
  booktitle = {{TACAS}, Held as Part of {ETAPS}},
  series    = {LNCS},
  volume    = {12079},
  pages     = {39--56},
  publisher = {Springer},
  year      = {2020},
  url       = {https://doi.org/10.1007/978-3-030-45237-7\_3},
  doi       = {10.1007/978-3-030-45237-7\_3},
  timestamp = {Mon, 04 May 2020 13:23:20 +0200},
  biburl    = {https://dblp.org/rec/conf/tacas/AlmeidaMV20.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  abstract  = {We present an algorithm to decide the equivalence of context-free
                  session types, practical to the point of being incorporated in
                  a compiler. We prove its soundness and completeness. We
                  further evaluate its behaviour in practice. In the process, we
                  introduce an algorithm to decide the bisimilarity of simple
                  grammars.}
}

@inproceedings{DBLP:conf/esop/VasconcelosCAM20,
  selected  = true,
  bibtex_show={true},
  abbr      = {ESOP'20},
  url_custom = {https://doi.org/10.1007/978-3-030-44914-8\_26},
  author    = {Vasco T. Vasconcelos and
               Filipe Casal and
               Bernardo Almeida and
               Andreia Mordido},
  editor    = {Peter M{\"{u}}ller},
  title     = {Mixed Sessions},
  booktitle = {{ESOP}, Held as Part of {ETAPS}},
  series    = {LNCS},
  volume    = {12075},
  pages     = {715--742},
  publisher = {Springer},
  year      = {2020},
  url       = {https://doi.org/10.1007/978-3-030-44914-8\_26},
  doi       = {10.1007/978-3-030-44914-8\_26},
  timestamp = {Mon, 04 May 2020 13:23:23 +0200},
  biburl    = {https://dblp.org/rec/conf/esop/VasconcelosCAM20.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  abstract  = {Session types describe patterns of interaction on communicating
                  channels. Traditional session types include a form of choice
                  whereby servers offer a collection of options, of which each
                  client picks exactly one. This sort of choice constitutes a
                  particular case of separated choice: offering on one side,
                  selecting on the other. We introduce mixed choices in the
                  context of session types and argue that they increase the
                  flexibility of program development at the same time that they
                  reduce the number of synchronisation primitives to exactly
                  one. We present a type system incorporating subtyping and
                  prove preservation and absence of runtime errors for
                  well-typed processes. We further show that classical
                  (conventional) sessions can be faithfully and tightly embedded
                  in mixed choices. Finally, we discuss algorithmic type
                  checking and a runtime system built on top of a conventional
                  (choice-less) message-passing architecture.}
}


@inproceedings{DBLP:journals/corr/abs-1904-01284,
  bibtex_show={true},
  abbr      = {PLACES'19},
  url_custom = {https://doi.org/10.4204/EPTCS.291.2},
  author    = {Bernardo Almeida and
               Andreia Mordido and
               Vasco T. Vasconcelos},
  editor    = {Francisco Martins and
               Dominic Orchard},
  title     = {FreeST: Context-free Session Types in a Functional Language},
  booktitle = {PLACES@ETAPS, Prague, Czech Republic},
  series    = {{EPTCS}},
  volume    = {291},
  pages     = {12--23},
  year      = {2019},
  url       = {https://doi.org/10.4204/EPTCS.291.2},
  doi       = {10.4204/EPTCS.291.2},
  timestamp = {Sat, 19 Oct 2019 19:22:56 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-1904-01284.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  abstract={FreeST is an experimental concurrent programming language. Based on
                  a core linear functional programming language, it features
                  primitives to fork new threads, and for channel creation and
                  communication. A powerful type system of context-free session
                  types governs the interaction on channels. The compiler builds
                  on a novel algorithm for deciding type equivalence of
                  context-free session types. This abstract provides a gentle
                  introduction to the language and discusses the validation
                  process and runtime system.}
}



@inproceedings{inforum19,
  bibtex_show={true},
  abbr      = {INFORUM'22},
  author = {Bernardo Almeida and Andreia Mordido and Vasco T. Vasconcelos},
  title     = {Uma linguagem de programa{\c{c}}{\~a}o com escolhas mistas em tipos de sess{\~a}o},
  year = {2019},  
  booktitle = {Atas do 11{\textdegree} Simp{\'o}sio de Inform{\'a}tica},
  abstract = { A abstra{\c{c}}{\~a}o e formaliza{\c{c}}{\~a}o da
                  comunica{\c{c}}{\~a}o inerente a sistemas de software {\'e}
                  fundamental para a confiabilidade de sistemas concorrentes.
                  Neste trabalho propomos um sistema de tipos que enriquece os
                  tipos de sess{\~a}o, permitindo escolhas mistas entre input e
                  output. Na linguagem que propomos, FreestMC, os processos
                  podem, a cada momento, decidir entre ler e escrever num dado
                  canal. Um sistema de tipos de sess{\~a}o garante, ainda assim,
                  que os processos seguem o protocolo. }
}

@inproceedings{inforum18,
  bibtex_show={true},
  abbr      = {INFORUM'18},
  author = {Bernardo Almeida and Vasco T. Vasconcelos},
  title     = {Uma linguagem de programa{\c{c}}{\~a}o com tipos de sess{\~a}o
                  independentes do contexto},
  booktitle = {Atas do 10{\textdegree} Simp{\'o}sio de Inform{\'a}tica},
  year = {2018},  
  abstract = { Os sistemas de software distribu{\'i}dos t{\^e}m uma
                  comunica{\c{c}}{\~a}o bastante intensiva onde o elevado
                  n{\'u}mero de mensagens trocadas entre processos tende a
                  tornar a codifica{\c{c}}{\~a}o dos mesmos bastante complexa.
                  Os tipos de sess{\~a}o foram propostos para responder a esta
                  necessidade, permitindo definir protocolos na forma de tipos
                  que representam "intera{\c{c}}{\~o}es corretas" do sistema e
                  que garantem propriedades tais como a inexist{\^e}ncia de
                  erros na comunica{\c{c}}{\~a}o e de situa{\c{c}}{\~o}es de
                  impasse. Os tipos de sess{\~a}o tradicionais s{\~a}o descritos
                  por linguagens regulares, permitindo, por exemplo, a
                  defini{\c{c}}{\~a}o de protocolos na forma de lista mas
                  n{\~a}o em forma de {\'a}rvore. Neste artigo apresenta-se uma
                  linguagem de programa{\c{c}}{\~a}o concorrente, explicitamente
                  tipificada, onde os processos comunicam exclusivamente por
                  troca de mensagens cujos protocolos s{\~a}o definidos por
                  tipos de sess{\~a}o livres do contexto. }
}

@thesis{almeida2018linguagem,
  abbr= {M.Sc. Thesis},
  bibtex_show={true},
  url_custom = {https://repositorio.ul.pt/handle/10451/36701},
  title={Uma linguagem de programa{\c{c}}{\~a}o com tipos de sess{\~a}o independentes do contexto},
  author={Bernardo Almeida},
  year={2018}
  
}


